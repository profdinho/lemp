version: '3'
services:
    nginx:
        container_name: nginx
        build:
            context: ./etc/nginx/
            dockerfile: Dockerfile
        ports:
            - "80:80"
            - "443:443"
        restart: unless-stopped
        tty: true
        volumes:
            - ./src/public/:/var/www/html/
            - ./src/5acertos/:/var/www/5acertos/html/
            - ./src/profdinho/:/var/www/profdinho/html/
            - ./logs/:/var/log/nginx/
            - ./etc/nginx/conf.d/:/etc/nginx/conf.d/
            - ./etc/nginx/certs/:/etc/nginx/certs/
            - /etc/localtime:/etc/localtime:ro
        depends_on:
            - php-fpm
            - postgres
            - mysql
            - redis
            - springboot
        networks:
            - app-network
    php-fpm:
        container_name: php-fpm
        build:
            context: ./etc/php-fpm/
            dockerfile: Dockerfile
        expose:
            - "9000"
        restart: unless-stopped
        tty: true
        volumes:
            - ./src/public/:/var/www/html/
            - ./src/5acertos/:/var/www/5acertos/html/
            - ./src/profdinho/:/var/www/profdinho/html/
            - /etc/localtime:/etc/localtime:ro
        environment:
            SERVICE_NAME: php-fpm
        networks:
            - app-network
    postgres:
        container_name: postgres
        build:
            context: ./etc/postgres/
            dockerfile: Dockerfile
        ports:
            - "5432:5432"
        restart: unless-stopped
        tty: true
        volumes:
            - ./data/postgresql/:/var/lib/postgresql/data/
            - /etc/localtime:/etc/localtime:ro
        environment:
            - POSTGRES_DB=profdinho
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=profdinho
            - TZ=GMT
        networks:
            - app-network
    mysql:
        container_name: mysql
        build:
            context: ./etc/mysql/
            dockerfile: Dockerfile
        ports:
            - "3306:3306"
        restart: unless-stopped
        tty: true
        volumes:
            - ./data/mysql/:/var/lib/mysql/
            - ./etc/mysql/my.cnf:/etc/mysql/my.cnf
            - ./logs/my_general.log:/var/lib/mysql/general.log
            - /etc/localtime:/etc/localtime:ro
        environment:
            MYSQL_DATABASE: profdinho
            MYSQL_ROOT_PASSWORD: profdinho
            SERVICE_NAME: mysql
        networks:
            - app-network
    redis:
        container_name: redis
        build:
            context: ./etc/redis/
            dockerfile: Dockerfile
        command: [ "redis-server", "--protected-mode", "no" ]
        ports:
            - "6379:6379"
        restart: unless-stopped
        volumes:
            - ./data/redis/:/data/
            - /etc/localtime:/etc/localtime:ro
        networks: 
            - app-network
    springboot:
        container_name: springboot
        build:
            context: ./etc/springboot
            dockerfile: Dockerfile
        ports: 
            - "8080:8080"
        restart: unless-stopped
        volumes:
            - ./etc/springboot/:/etc/springboot/
        depends_on:
            - postgres
            - redis
            - mysql
        networks: 
            - app-network
    zookeeper:
        container_name: zookeeper
        build:
            context: ./etc/kafka/
            dockerfile: Dockerfile.zpk
        restart: unless-stopped
        environment:
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
            ZOOKEEPER_SYNC_LIMIT: 2
        networks: 
            - app-network    
    kafka:
        container_name: kafka
        build:
            context: ./etc/kafka/
            dockerfile: Dockerfile.kfk
        ports:
            - "9092:9092"
        restart: unless-stopped
        depends_on:
            - zookeeper
        environment:
            KAFKA_BROKER_ID: 1
            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        networks: 
            - app-network
networks:
    app-network:
        driver: bridge
